{
  "timestamp": "20250504_143719",
  "num_problems": 5,
  "models": {
    "deepseek": {
      "config": {
        "model": "deepseek/deepseek-chat",
        "api_key": "sk-0a036fe32c2e47b1ab2ae48598bf14a3"
      },
      "results": [
        {
          "problem_id": 0,
          "task_id": "HumanEval/0",
          "function_name": "has_close_elements",
          "execution_time": 42.13201856613159,
          "evaluation": {
            "passed_tests": 209,
            "total_tests": 531,
            "success_rate": 0.3935969868173258
          },
          "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    sorted_numbers = sorted(numbers)\n    \n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n    \n    return False"
        },
        {
          "problem_id": 1,
          "task_id": "HumanEval/1",
          "function_name": "separate_paren_groups",
          "execution_time": 40.9796507358551,
          "evaluation": {
            "passed_tests": 116,
            "total_tests": 441,
            "success_rate": 0.26303854875283444
          },
          "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate balanced parentheses groups from a string, ignoring spaces.\n    \n    Args:\n        paren_string: String containing multiple groups of nested parentheses.\n        \n    Returns:\n        List of separate balanced parentheses groups.\n    \"\"\"\n    result = []\n    current_group = []\n    balance = 0\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        elif char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n            if balance == 0:\n                result.append(''.join(current_group))\n                current_group = []\n    \n    return result"
        },
        {
          "problem_id": 2,
          "task_id": "HumanEval/2",
          "function_name": "truncate_number",
          "execution_time": 31.412834882736206,
          "evaluation": {
            "passed_tests": 74,
            "total_tests": 212,
            "success_rate": 0.3490566037735849
          },
          "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0"
        },
        {
          "problem_id": 3,
          "task_id": "HumanEval/3",
          "function_name": "below_zero",
          "execution_time": 60.80112886428833,
          "evaluation": {
            "passed_tests": 135,
            "total_tests": 394,
            "success_rate": 0.3426395939086294
          },
          "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
        },
        {
          "problem_id": 4,
          "task_id": "HumanEval/4",
          "function_name": "mean_absolute_deviation",
          "execution_time": 35.27574157714844,
          "evaluation": {
            "passed_tests": 102,
            "total_tests": 275,
            "success_rate": 0.3709090909090909
          },
          "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation (MAD) for a list of numbers.\n    MAD is the average absolute difference between each element and the mean of the dataset.\n    \n    Args:\n        numbers: List of float numbers\n        \n    Returns:\n        float: The Mean Absolute Deviation\n        \n    Raises:\n        ValueError: If the input list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n        \n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"
        }
      ]
    },
    "gemini": {
      "config": {
        "model": "gemini/gemini-2.5-pro-exp-03-25",
        "temperature": 0.1,
        "api_key": "AIzaSyBf2ae4uAPvlTETlJ0JLK90h80s20DpBNM"
      },
      "results": [
        {
          "problem_id": 0,
          "task_id": "HumanEval/0",
          "function_name": "has_close_elements",
          "execution_time": 95.77225708961487,
          "evaluation": {
            "passed_tests": 209,
            "total_tests": 531,
            "success_rate": 0.3935969868173258
          },
          "generated_code": "import math\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 0.5)\n    False\n    >>> has_close_elements([1.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 1.0], 0.1)\n    True\n    >>> has_close_elements([1.0, 1.09], 0.1)\n    True\n    >>> has_close_elements([1.0, 1.1], 0.1)\n    False\n    >>> has_close_elements([5.0, 2.0, 8.0, 2.1], 0.2)\n    True\n    \"\"\"\n    # Handle edge cases: empty list or list with one element\n    if len(numbers) < 2:\n        return False\n\n    # Create a copy and sort it to easily compare adjacent elements\n    # Sorting a copy avoids modifying the original list.\n    sorted_numbers = sorted(numbers)\n\n    # Iterate through the sorted list and check differences between adjacent elements\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n        # Check if the difference is less than the threshold\n        # This also correctly handles threshold <= 0, as diff >= 0.\n        # If threshold <= 0, diff < threshold can never be true.\n        if diff < threshold:\n            return True\n\n    # If no close elements were found after checking all adjacent pairs\n    return False\n\n# Example Usage and Doctests (Optional: can be run if needed)\n# import doctest\n# doctest.testmod()"
        },
        {
          "problem_id": 1,
          "task_id": "HumanEval/1",
          "function_name": "separate_paren_groups",
          "execution_time": 93.00512647628784,
          "evaluation": {
            "passed_tests": 116,
            "total_tests": 441,
            "success_rate": 0.26303854875283444
          },
          "generated_code": "import sys\n# Add parent directory to path to allow imports if running as a script\n# sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    >>> separate_paren_groups('()')\n    ['()']\n    >>> separate_paren_groups('(())')\n    ['(())']\n    >>> separate_paren_groups('()()()')\n    ['()', '()', '()']\n    >>> separate_paren_groups('(()())((()))')\n    ['(()())', '((()))']\n    >>> separate_paren_groups('')\n    []\n    >>> separate_paren_groups('   ')\n    []\n    >>> separate_paren_groups('(()') # Unbalanced\n    []\n    >>> separate_paren_groups('())') # Unbalanced, finds first balanced group\n    ['()']\n    >>> separate_paren_groups(')(') # Invalid sequence\n    []\n    \"\"\"\n    # Remove spaces from the input string\n    cleaned_string = paren_string.replace(\" \", \"\")\n    \n    # Handle empty string edge case after cleaning\n    if not cleaned_string:\n        return []\n\n    result = []          # List to store the separated groups\n    current_group = \"\"   # String to build the current group\n    level = 0            # Tracks the nesting level of parentheses\n\n    for char in cleaned_string:\n        if char == '(':\n            level += 1\n            # Append the character to the current group string\n            # We start building the group as soon as we encounter the first '('\\n            # or continue if we are already inside a group.\n            current_group += char\n        elif char == ')':\n            # Only process a closing parenthesis if there is an open group (level > 0)\n            if level > 0:\n                # Append the closing parenthesis\n                current_group += char\n                level -= 1\n                # If the level returns to 0, we have found a complete top-level group\n                if level == 0:\n                    result.append(current_group)\n                    # Reset current_group to start looking for the next top-level group\n                    current_group = \"\"\n            # else: If level is 0 or less, this is an extraneous ')' - ignore it.\n            \n    # After iterating through the string:\n    # - If level is not 0, the string was unbalanced overall.\n    # - Any characters remaining in current_group belong to an unclosed group.\n    # - We only add groups to 'result' when they are properly closed at level 0.\n    # Thus, we just return the 'result' list accumulated so far.\n    return result\n\n# Example usage (optional, for testing)\n# print(f\"Input: '( ) (( )) (( )( ))' -> Output: {separate_paren_groups('( ) (( )) (( )( ))')}\")\n# print(f\"Input: '()()()' -> Output: {separate_paren_groups('()()()')}\")\n# print(f\"Input: '(()())((()))' -> Output: {separate_paren_groups('(()())((()))')}\")\n# print(f\"Input: '())' -> Output: {separate_paren_groups('())')}\")\n# print(f\"Input: '(()' -> Output: {separate_paren_groups('(()')}\")\n# print(f\"Input: '' -> Output: {separate_paren_groups('')}\")\n# print(f\"Input: '   ' -> Output: {separate_paren_groups('   ')}\")\n# print(f\"Input: ')(' -> Output: {separate_paren_groups(')(')}\")\n# print(f\"Input: '((())())(()())' -> Output: {separate_paren_groups('((())())(()())')}\")"
        },
        {
          "problem_id": 2,
          "task_id": "HumanEval/2",
          "function_name": "truncate_number",
          "execution_time": 169.53382873535156,
          "evaluation": {
            "passed_tests": 74,
            "total_tests": 212,
            "success_rate": 0.3490566037735849
          },
          "generated_code": "import math # Not strictly necessary for number % 1.0, but good practice\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    Args:\n        number: A floating point number or an integer. While the prompt\n                mentions positive numbers, the implementation using % 1.0\n                also works for negative numbers (e.g., -3.5 % 1.0 -> 0.5).\n\n    Returns:\n        The decimal part of the number as a float.\n\n    Raises:\n        TypeError: If the input is not a float or int.\n\n    Examples:\n        >>> truncate_number(3.5)\n        0.5\n        >>> truncate_number(123.456)\n        0.45600000000000007 # Note potential floating point inaccuracies\n        >>> truncate_number(0.999)\n        0.999\n        >>> truncate_number(10.0)\n        0.0\n        >>> truncate_number(0.0)\n        0.0\n        >>> truncate_number(5) # Integer input\n        0.0\n        >>> truncate_number(-3.5) # Negative input\n        0.5\n    \"\"\"\n    # 1. Handle edge cases: Type checking\n    if not isinstance(number, (float, int)):\n        raise TypeError(\"Input must be a floating point number or an integer.\")\n\n    # 2. Ensure number is float for the calculation\n    f_number = float(number)\n\n    # 3. Calculate decimal part using modulo operator\n    # For positive x, x % 1.0 gives the fractional part.\n    # For negative x, x % 1.0 gives 1.0 - abs(fractional part) in Python.\n    # e.g., 3.5 % 1.0 = 0.5\n    # e.g., -3.5 % 1.0 = 0.5\n    # If the strict definition of \"decimal part\" for negative numbers\n    # should be negative (like math.modf), this would need adjustment.\n    # However, based on the prompt focusing on positive numbers and the\n    # example, % 1.0 seems appropriate.\n    decimal_part = f_number % 1.0\n\n    # 4. Return the correct type\n    return decimal_part"
        },
        {
          "problem_id": 3,
          "task_id": "HumanEval/3",
          "function_name": "below_zero",
          "execution_time": 35.18253302574158,
          "evaluation": {
            "passed_tests": 135,
            "total_tests": 394,
            "success_rate": 0.3426395939086294
          },
          "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"
        },
        {
          "problem_id": 4,
          "task_id": "HumanEval/4",
          "function_name": "mean_absolute_deviation",
          "execution_time": 69.36851024627686,
          "evaluation": {
            "passed_tests": 102,
            "total_tests": 275,
            "success_rate": 0.3709090909090909
          },
          "generated_code": "import math\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    >>> mean_absolute_deviation([])\n    0.0\n    >>> mean_absolute_deviation([5.0])\n    0.0\n    >>> mean_absolute_deviation([1.0, 1.0, 1.0, 1.0])\n    0.0\n    >>> mean_absolute_deviation([-1.0, 0.0, 1.0])\n    0.6666666666666666\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        # Handle edge case: empty list. The deviation is undefined,\n        # but returning 0.0 is a common convention.\n        return 0.0\n\n    # Calculate the mean using math.fsum for potentially better precision\n    mean = math.fsum(numbers) / n\n\n    # Calculate the sum of absolute differences from the mean using math.fsum\n    sum_abs_diff = math.fsum(abs(x - mean) for x in numbers)\n\n    # Calculate the Mean Absolute Deviation\n    mad = sum_abs_diff / n\n\n    return mad\n\n# Example of how to run doctests if this were in a file:\n# if __name__ == \"__main__\":\n#     import doctest\n#     doctest.testmod()"
        }
      ]
    }
  }
}